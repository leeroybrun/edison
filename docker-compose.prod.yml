version: '3.9'

services:
  # PostgreSQL Database - Latest stable version
  postgres:
    image: postgres:18-alpine
    container_name: edison-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: edison
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: edison
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U edison"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - edison-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache & Queue - Latest stable version
  redis:
    image: redis:7.4-alpine
    container_name: edison-redis-prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - edison-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 256M

  # API Server - Production build
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
      args:
        NODE_VERSION: 22.20.0
        PNPM_VERSION: 10.18.3
    image: edison-api:latest
    container_name: edison-api-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://edison:${POSTGRES_PASSWORD}@postgres:5432/edison
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - edison-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Web Application - Production build
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: production
      args:
        NODE_VERSION: 22.20.0
        PNPM_VERSION: 10.18.3
        API_BASE_URL: http://api:8080
        NEXT_PUBLIC_API_URL: /api/trpc
    image: edison-web:latest
    container_name: edison-web-prod
    restart: always
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      API_BASE_URL: http://api:8080
      NEXT_PUBLIC_API_URL: /api/trpc
      PORT: 3000
      HOSTNAME: 0.0.0.0
    ports:
      - "${WEB_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - edison-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  edison-network:
    driver: bridge
