# syntax=docker/dockerfile:1

# Node.js 22 LTS - Active LTS as of 2025
ARG NODE_VERSION=22.20.0
ARG PNPM_VERSION=10.18.3

# Base stage - setup pnpm and workspace structure
FROM node:${NODE_VERSION}-alpine AS base
ARG PNPM_VERSION
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
# Install OpenSSL for Prisma
RUN apk add --no-cache openssl libc6-compat
RUN npm install -g pnpm@${PNPM_VERSION}
WORKDIR /app

# Dependencies stage - install all dependencies
FROM base AS deps
# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
# Copy all package.json files for workspace dependencies
COPY packages/shared/package.json ./packages/shared/
COPY packages/api/package.json ./packages/api/
COPY apps/web/package.json ./apps/web/
# Install dependencies with frozen lockfile
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# Builder stage - build the application
FROM base AS builder
# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages ./packages
COPY --from=deps /app/apps ./apps
# Copy source code
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/shared ./packages/shared
COPY packages/api ./packages/api
COPY apps/web ./apps/web
COPY tsconfig.json ./

# Set build-time environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ARG API_BASE_URL=http://api:8080
ARG NEXT_PUBLIC_API_URL=/api/trpc
ENV API_BASE_URL=${API_BASE_URL}
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# Build shared package first, then API (needed for types), then web
RUN pnpm --filter @edison/shared build
RUN pnpm --filter @edison/api build
RUN pnpm --filter @edison/web build

# Production stage - minimal runtime image with Next.js standalone
FROM node:${NODE_VERSION}-alpine AS production
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
# Install OpenSSL for Prisma (needed for API types)
RUN apk add --no-cache openssl libc6-compat

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy Next.js standalone output
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "apps/web/server.js"]
